<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://software.llnl.gov/feed.xml" rel="self" type="application/atom+xml" /><link href="https://software.llnl.gov/" rel="alternate" type="text/html" /><updated>2020-04-22T04:51:19-05:00</updated><id>https://software.llnl.gov/feed.xml</id><title type="html">LLNL Software Portal</title><subtitle>Lawrence Livermore National Laboratory Software Portal</subtitle><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><entry><title type="html">LLNL to Host First Virtual Hackathon</title><link href="https://software.llnl.gov/news/2020/04/12/hackathon/" rel="alternate" type="text/html" title="LLNL to Host First Virtual Hackathon" /><published>2020-04-12T00:00:00-05:00</published><updated>2020-04-12T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/04/12/hackathon</id><content type="html" xml:base="https://software.llnl.gov/news/2020/04/12/hackathon/">&lt;p&gt;Held since 2012, LLNL’s &lt;a href=&quot;https://computing.llnl.gov/newsroom/hackathons&quot;&gt;hackathons&lt;/a&gt; are 24-hour opportunities to brainstorm, foster creativity, prototype, and explore. Participants work in groups or individually and often strive to learn new skills, programming languages, and tools in service to LLNL’s missions. This year’s spring hackathon (April 30 through May 1) will be held virtually. In true hackathon spirit, several tech solutions will enable participants to collaborate remotely. Charalynn Macedo, division leader for LLNL’s Enterprise Applications Services, will kick off the event with a brief keynote presentation.&lt;/p&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">Held since 2012, LLNL’s hackathons are 24-hour opportunities to brainstorm, foster creativity, prototype, and explore. Participants work in groups or individually and often strive to learn new skills, programming languages, and tools in service to LLNL’s missions. This year’s spring hackathon (April 30 through May 1) will be held virtually. In true hackathon spirit, several tech solutions will enable participants to collaborate remotely. Charalynn Macedo, division leader for LLNL’s Enterprise Applications Services, will kick off the event with a brief keynote presentation.</summary></entry><entry><title type="html">ISC Is Going Virtual</title><link href="https://software.llnl.gov/news/2020/04/08/isc/" rel="alternate" type="text/html" title="ISC Is Going Virtual" /><published>2020-04-08T00:00:00-05:00</published><updated>2020-04-08T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/04/08/isc</id><content type="html" xml:base="https://software.llnl.gov/news/2020/04/08/isc/">&lt;p&gt;The &lt;a href=&quot;https://www.isc-hpc.com/&quot;&gt;ISC&lt;/a&gt; (formerly known as the International Supercomputing Conference) caters to the hardware and software demands of global research centers and businesses in the fields of HPC, artificial intelligence, machine learning, and data analytics. Instead of meeting in Frankfurt, Germany, this year the conference will be held online during June 22-24. LLNL staff will be involved in presentations, tutorials, and other events. Stay tuned for more information as the program is finalized.&lt;/p&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">The ISC (formerly known as the International Supercomputing Conference) caters to the hardware and software demands of global research centers and businesses in the fields of HPC, artificial intelligence, machine learning, and data analytics. Instead of meeting in Frankfurt, Germany, this year the conference will be held online during June 22-24. LLNL staff will be involved in presentations, tutorials, and other events. Stay tuned for more information as the program is finalized.</summary></entry><entry><title type="html">Charliecloud 0.15 Released</title><link href="https://software.llnl.gov/news/2020/04/06/ccloud-0.15/" rel="alternate" type="text/html" title="Charliecloud 0.15 Released" /><published>2020-04-06T00:00:00-05:00</published><updated>2020-04-06T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/04/06/ccloud-0.15</id><content type="html" xml:base="https://software.llnl.gov/news/2020/04/06/ccloud-0.15/">&lt;p&gt;LANL led with LLNL contributors, &lt;a href=&quot;https://github.com/hpc/charliecloud&quot;&gt;Charliecloud&lt;/a&gt; provides user-defined software stacks for HPC centers. It uses Linux user namespaces to run containers with no privileged operations or daemons and minimal configuration changes on center resources. Version 0.15 includes expanded capabilities, examples, and test suite.&lt;/p&gt;

&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hpc/charliecloud/releases/tag/v0.15&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hpc/charliecloud&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hpc.github.io/charliecloud&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">LANL led with LLNL contributors, Charliecloud provides user-defined software stacks for HPC centers. It uses Linux user namespaces to run containers with no privileged operations or daemons and minimal configuration changes on center resources. Version 0.15 includes expanded capabilities, examples, and test suite.</summary></entry><entry><title type="html">New Repo: QnD</title><link href="https://software.llnl.gov/news/2020/04/05/qnd-new/" rel="alternate" type="text/html" title="New Repo: QnD" /><published>2020-04-05T00:00:00-05:00</published><updated>2020-04-05T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/04/05/qnd-new</id><content type="html" xml:base="https://software.llnl.gov/news/2020/04/05/qnd-new/">&lt;p&gt;&lt;a href=&quot;https://github.com/LLNL/qnd&quot;&gt;QnD&lt;/a&gt; (short for Quick and Dirty: Python Binary Storage Interface) is a simple, user-friendly API for storing numpy ndarrays in binary files. It is written as a frontend capable of supporting multiple backend file formats.&lt;/p&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">QnD (short for Quick and Dirty: Python Binary Storage Interface) is a simple, user-friendly API for storing numpy ndarrays in binary files. It is written as a frontend capable of supporting multiple backend file formats.</summary></entry><entry><title type="html">libCEED 0.6 Released</title><link href="https://software.llnl.gov/news/2020/04/01/libceed-0.6/" rel="alternate" type="text/html" title="libCEED 0.6 Released" /><published>2020-04-01T00:00:00-05:00</published><updated>2020-04-01T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/04/01/libceed-0.6</id><content type="html" xml:base="https://software.llnl.gov/news/2020/04/01/libceed-0.6/">&lt;p&gt;The Center for Efficient Exascale Discretizations (&lt;a href=&quot;https://github.com/CEED&quot;&gt;CEED&lt;/a&gt;) within the US Department of Energy’s ECP is helping applications leverage future architectures by developing state-of-the-art discretization algorithms that better exploit the hardware and deliver a significant performance gain over conventional methods. &lt;a href=&quot;https://github.com/CEED/libCEED&quot;&gt;libCEED&lt;/a&gt; is a high-order API library that provides a common algebraic low-level operator description, allowing a wide variety of applications to take advantage of the efficient operator evaluation algorithms in the different CEED packages. libCEED is a C99 library with no external dependencies.&lt;/p&gt;

&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CEED/libCEED&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CEED/libCEED/releases/tag/v0.6&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://libceed.readthedocs.io/en/latest/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ceed.exascaleproject.org/&quot;&gt;CEED website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">The Center for Efficient Exascale Discretizations (CEED) within the US Department of Energy’s ECP is helping applications leverage future architectures by developing state-of-the-art discretization algorithms that better exploit the hardware and deliver a significant performance gain over conventional methods. libCEED is a high-order API library that provides a common algebraic low-level operator description, allowing a wide variety of applications to take advantage of the efficient operator evaluation algorithms in the different CEED packages. libCEED is a C99 library with no external dependencies.</summary></entry><entry><title type="html">Variorum 0.2.0 Released</title><link href="https://software.llnl.gov/news/2020/03/13/variorum-0.2.0/" rel="alternate" type="text/html" title="Variorum 0.2.0 Released" /><published>2020-03-13T00:00:00-05:00</published><updated>2020-03-13T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/03/13/variorum-0.2.0</id><content type="html" xml:base="https://software.llnl.gov/news/2020/03/13/variorum-0.2.0/">&lt;p&gt;&lt;a href=&quot;https://github.com/LLNL/variorum&quot;&gt;Variorum&lt;/a&gt; is a platform-agnostic library exposing monitor and control interfaces for several features in hardware architectures. Its general interfaces provide privileged functionality for monitoring and controlling various hardware-level features of multiple hardware architectures. The latest release includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for Nvidia platform – Volta architecture&lt;/li&gt;
  &lt;li&gt;On Intel platforms, translate both power limit time windows&lt;/li&gt;
  &lt;li&gt;Integrate Travis and GitLab for CI&lt;/li&gt;
  &lt;li&gt;and much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LLNL/variorum/releases/tag/v0.2.0&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LLNL/variorum&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://variorum.readthedocs.io/en/latest/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">Variorum is a platform-agnostic library exposing monitor and control interfaces for several features in hardware architectures. Its general interfaces provide privileged functionality for monitoring and controlling various hardware-level features of multiple hardware architectures. The latest release includes: Support for Nvidia platform – Volta architecture On Intel platforms, translate both power limit time windows Integrate Travis and GitLab for CI and much more!</summary></entry><entry><title type="html">MFEM 4.1 Released</title><link href="https://software.llnl.gov/news/2020/03/11/mfem-4.1/" rel="alternate" type="text/html" title="MFEM 4.1 Released" /><published>2020-03-11T00:00:00-05:00</published><updated>2020-03-11T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/03/11/mfem-4.1</id><content type="html" xml:base="https://software.llnl.gov/news/2020/03/11/mfem-4.1/">&lt;p&gt;&lt;a href=&quot;https://github.com/mfem/mfem&quot;&gt;MFEM&lt;/a&gt; is a lightweight, general, scalable C++ library for finite element methods. Its goal is to enable high-performance scalable finite element discretization research and application development on a wide variety of platforms, ranging from laptops to supercomputers. The latest release includes several improvements and new features, such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Improved GPU capabilities including support for HIP, libCEED, Umpire, and debugging&lt;/li&gt;
  &lt;li&gt;GPU acceleration in additional examples, finite element and linear algebra kernels&lt;/li&gt;
  &lt;li&gt;Many meshing, discretization, and matrix-free algorithmic improvements&lt;/li&gt;
  &lt;li&gt;ParaView, GSLIB-FindPoints, HiOp, and Ginkgo support&lt;/li&gt;
  &lt;li&gt;18 new examples and miniapps, including &lt;a href=&quot;https://mfem.org/toys/&quot;&gt;toy miniapps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;and much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LLNL/Caliper/releases/tag/v2.3.0&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfem/mfem&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mfem.org&quot;&gt;Website with documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">MFEM is a lightweight, general, scalable C++ library for finite element methods. Its goal is to enable high-performance scalable finite element discretization research and application development on a wide variety of platforms, ranging from laptops to supercomputers. The latest release includes several improvements and new features, such as: Improved GPU capabilities including support for HIP, libCEED, Umpire, and debugging GPU acceleration in additional examples, finite element and linear algebra kernels Many meshing, discretization, and matrix-free algorithmic improvements ParaView, GSLIB-FindPoints, HiOp, and Ginkgo support 18 new examples and miniapps, including toy miniapps and much more!</summary></entry><entry><title type="html">Caliper 2.3.0 Released</title><link href="https://software.llnl.gov/news/2020/03/11/caliper-2.3.0/" rel="alternate" type="text/html" title="Caliper 2.3.0 Released" /><published>2020-03-11T00:00:00-05:00</published><updated>2020-03-11T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/03/11/caliper-2.3.0</id><content type="html" xml:base="https://software.llnl.gov/news/2020/03/11/caliper-2.3.0/">&lt;p&gt;&lt;a href=&quot;https://github.com/LLNL/Caliper&quot;&gt;Caliper&lt;/a&gt; is a program instrumentation and performance measurement framework. It is designed as a performance analysis toolbox in a library, allowing one to bake performance analysis capabilities directly into applications and activate them at runtime. The latest release includes several improvements and new features, such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Improved robustness&lt;/li&gt;
  &lt;li&gt;New PAPI service&lt;/li&gt;
  &lt;li&gt;Kokkos profiling support&lt;/li&gt;
  &lt;li&gt;Inclusive time and percentage calculation for the runtime-report config&lt;/li&gt;
  &lt;li&gt;Top-down analysis for Intel Skylake CPUs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LLNL/Caliper/releases/tag/v2.3.0&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LLNL/Caliper&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://llnl.github.io/Caliper/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://computing.llnl.gov/projects/caliper&quot;&gt;Caliper: Application Introspection System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">Caliper is a program instrumentation and performance measurement framework. It is designed as a performance analysis toolbox in a library, allowing one to bake performance analysis capabilities directly into applications and activate them at runtime. The latest release includes several improvements and new features, such as: Improved robustness New PAPI service Kokkos profiling support Inclusive time and percentage calculation for the runtime-report config Top-down analysis for Intel Skylake CPUs</summary></entry><entry><title type="html">New Repo: Typeforge</title><link href="https://software.llnl.gov/news/2020/03/10/typeforge-new/" rel="alternate" type="text/html" title="New Repo: Typeforge" /><published>2020-03-10T00:00:00-05:00</published><updated>2020-03-10T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/03/10/typeforge-new</id><content type="html" xml:base="https://software.llnl.gov/news/2020/03/10/typeforge-new/">&lt;p&gt;&lt;a href=&quot;https://github.com/LLNL/typeforge&quot;&gt;Typeforge&lt;/a&gt; is a tool for type refactoring of C/C++ programs. It enables users to change the type of any variable and automatically determines all necessary additional (i.e., type-dependent) changes. It guarantees the syntactic and semantic correctness of the generated code.&lt;/p&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">Typeforge is a tool for type refactoring of C/C++ programs. It enables users to change the type of any variable and automatically determines all necessary additional (i.e., type-dependent) changes. It guarantees the syntactic and semantic correctness of the generated code.</summary></entry><entry><title type="html">CCT 1.0.8 Released</title><link href="https://software.llnl.gov/news/2020/03/10/cct-1.0.8/" rel="alternate" type="text/html" title="CCT 1.0.8 Released" /><published>2020-03-10T00:00:00-05:00</published><updated>2020-03-10T00:00:00-05:00</updated><id>https://software.llnl.gov/news/2020/03/10/cct-1.0.8</id><content type="html" xml:base="https://software.llnl.gov/news/2020/03/10/cct-1.0.8/">&lt;p&gt;The Coda Calibration Tool (CCT) calculates reliable moment magnitudes for small- to moderate-sized seismic events. This release contains several new features, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;MW spectra truncation&lt;/li&gt;
  &lt;li&gt;UQ measurements for final spectra results&lt;/li&gt;
  &lt;li&gt;Persistent measurement intermediary artifacts&lt;/li&gt;
  &lt;li&gt;Capability to export diagnostic plots as images&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LLNL/coda-calibration-tool/releases/tag/1.0.8&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LLNL/coda-calibration-tool&quot;&gt;GitHub repo&lt;/a&gt;, which includes a demo&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Science &amp;amp; Technology Review&lt;/em&gt; article: &lt;a href=&quot;https://str.llnl.gov/2018-10/gok&quot;&gt;Stronger Structures through Scientific Collaboration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>LLNL Open Source &lt;open-source@llnl.gov&gt;</name></author><summary type="html">The Coda Calibration Tool (CCT) calculates reliable moment magnitudes for small- to moderate-sized seismic events. This release contains several new features, including: MW spectra truncation UQ measurements for final spectra results Persistent measurement intermediary artifacts Capability to export diagnostic plots as images</summary></entry></feed>